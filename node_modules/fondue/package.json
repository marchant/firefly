{
  "name": "fondue",
  "description": "rewrites JavaScript code to collect partial execution traces",
  "license": "MIT",
  "author": {
    "name": "Tom Lieber",
    "email": "tom@alltom.com"
  },
  "version": "0.5.3",
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "https://github.com/adobe-research/fondue.git"
  },
  "dependencies": {
    "falafel": "0.1.4",
    "falafel-map": "0.3.2"
  },
  "devDependencies": {
    "tap": "0.4.x"
  },
  "keywords": [
    "source",
    "trace",
    "instrumentation"
  ],
  "scripts": {
    "test": "tap test/test-*.js",
    "build-browser": "node lib/build-browser.js"
  },
  "readme": "fondue\n======\n\nCollect real-time JavaScript traces (number of times a function has been called, locations where exceptions have been thrown, etc).\n\nEasily instrument an entire program with [node-theseus](https://github.com/adobe-research/node-theseus).\n\nPlain objects are returned from all API calls so that they can be passed around as JSON. [node-theseus](https://github.com/adobe-research/node-theseus) does this with a WebSocket. [Theseus](https://github.com/adobe-research/theseus) does it over Chrome's Remote Debugging API (which boils down to a WebSocket).\n\n[![Build Status](https://travis-ci.org/adobe-research/fondue.png)](https://travis-ci.org/adobe-research/fondue)\n\nInstall\n-------\n\n    npm install fondue\n\nUse\n---\n\nExecute instrumented code:\n\n````javascript\nvar fondue = require('fondue'),\n    vm = require('vm');\n\nvar src = fondue.instrument('function foo(a) { return a * 2 }; foo(4)');\nvar sandbox = { __tracer: undefined };\nvar output = vm.runInNewContext(src, sandbox);\nvar tracer = sandbox.__tracer; // created by fondue when instrumented code is run\n````\n\nTrack trace points (functions, call sites, etc):\n\n````javascript\nvar functions = {};\nvar nodesHandle = tracer.trackNodes();\ntracer.newNodes(nodesHandle).forEach(function (n) {\n\tif (n.type === 'function') {\n\t\tfunctions[n.name] = n;\n\t}\n});\n\nvar fooNode = functions['foo'];\nconsole.log('foo started at', fooNode.start, 'and ended at', fooNode.end);\n\n// call tracer.newNodes() periodically if you expect new code to be required over time\n````\n\nTrack hit counts:\n\n````javascript\n// check how many times trace points have been hit\nvar hitsHandle = tracer.trackHits();\nvar hits1 = tracer.hitCountDeltas(hitsHandle);\nconsole.log('foo was called ' + (hits1[fooNode.id] || 0) + ' time');\n\n// call repeatedly to track hit counts over time\nvar hits2 = tracer.hitCountDeltas(hitsHandle);\nconsole.log('foo was called ' + (hits2[fooNode.id] || 0) + ' times (since last check)');\n````\n\nAccess function arguments and return values (and unhandled exceptions):\n\n````javascript\nvar logHandle = tracer.trackLogs({ ids: [fooNode.id] });\nvar invocations = tracer.logDelta(logHandle);\nconsole.log('foo returned:', invocations[0].returnValue);\nconsole.log('foo accepted arguments:', invocations[0].arguments);\n````\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/adobe-research/fondue/issues"
  },
  "homepage": "https://github.com/adobe-research/fondue",
  "_id": "fondue@0.5.3",
  "_from": "fondue@"
}
